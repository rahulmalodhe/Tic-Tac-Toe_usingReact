{"version":3,"sources":["logo.svg","components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03662ba5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\r\nimport{FaTimes, FaPen, FaRegCircle} from \"react-icons/fa\";\r\n\r\nconst Icon =({name})=>{\r\n    switch(name){\r\n        case 'Circle':\r\n            return <FaRegCircle className = \"icon\" />; \r\n        case 'Cross':\r\n            return <FaTimes className = \"icon\" />; \r\n        default:\r\n            return <FaPen className = \"icon\" />; \r\n    }\r\n};\r\nexport default Icon;","import React, {useState} from \"react\";\nimport logo from './logo.svg';\n\nimport Icon from \"./components/Icon\";\n\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Button, Col, Row } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\");\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n\n  const reloadGame =() =>{\n  setIsCross(\"false\");\n  setWinMessage(\"\");\n  itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner =() =>{\n    if(itemArray[0] === itemArray[1] && \n      itemArray[0] === itemArray[2] &&\n      itemArray[0]!== \"empty\"){\n        setWinMessage(` ${itemArray[0]} wins`)\n      }\n      else if(\n        itemArray[3] === itemArray[4] && \n        itemArray[4] === itemArray[5] &&\n        itemArray[3]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[3]} wins`); \n      }\n      else if(\n        itemArray[6] === itemArray[7] && \n        itemArray[7] === itemArray[8] &&\n        itemArray[6]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[6]} wins`); \n      }\n      else if(\n        itemArray[0] === itemArray[3] && \n        itemArray[3] === itemArray[6] &&\n        itemArray[0]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[0]} wins`); \n      }\n      else if(\n        itemArray[1] === itemArray[4] && \n        itemArray[4] === itemArray[7] &&\n        itemArray[1]!== \"empty\"\n      )\n      {\n        setWinMessage(`${ itemArray[1] } wins`); \n      }\n\n      else if(\n        itemArray[2] === itemArray[5] && \n        itemArray[5] === itemArray[8] &&\n        itemArray[2]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[2]} wins`); \n      }\n      else if(\n        itemArray[0] === itemArray[4] && \n        itemArray[4] === itemArray[8] &&\n        itemArray[0]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[0]} wins`); \n      }\n      else if(\n        itemArray[2] === itemArray[4] && \n        itemArray[4] === itemArray[6] &&\n        itemArray[2]!== \"empty\"\n      )\n      {\n        setWinMessage(`${itemArray[2]} wins`); \n      }\n     \n  };\n\n  const changeItem = itemNumber => {\n  if (winMessage) {\n    return toast(winMessage, { type: \"sucess\"});\n  }\n\n  if (itemArray[itemNumber] ===\"empty\"){\n  itemArray[itemNumber] = isCross ? \"Cross\" :\"Circle\";\n  setIsCross(!isCross);\n  } else{\n    return toast(\"already filled\", {type:\"error\"});\n  }\n  checkIsWinner();\n  };\n\n\n\n\n   return (\n    <Container className=\"p-5\">\n    <ToastContainer position=\"bottom-center\"/>\n    <Row>\n      <Col md={6} className = \"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n            <h1 className=\"text-primary text-uppercase text-center\">\n              {winMessage}\n            </h1>\n            <Button color=\"success\" block onClick={reloadGame}>Reload The Game</Button>\n\n          </div>\n        ):(\n          <h1 className=\"text-center text-warning\">\n            {isCross? \"Cross\":\"Circle\"} turn\n          </h1>\n        )}\n        <div className=\"grid\">\n          {itemArray.map((item, index)=>(\n            <Card color=\"warning\" onClick={()=>changeItem(index)}>\n              <CardBody className=\"box\">\n                <Icon name={item} />\n              </CardBody>\n            </Card>\n            \n          ))}\n\n        </div>\n      </Col>\n    </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}